label.in$Variable_name[!(label.in$Variable_name %in% names(post_matching_data))]
label.in$Variable_name[!(label.in$Variable_name %in% names(pre_matching_data))]
# number of cases before dropping missing
nrow(pre_matching_data)
nrow(post_matching_data)
pre_matching_data <- pre_matching_data[complete.cases(pre_matching_data[, label.in$Variable_name]),]
post_matching_data <- post_matching_data[complete.cases(post_matching_data[, label.in$Variable_name]),]
# number of cases after dropping missing
nrow(pre_matching_data)
nrow(post_matching_data)
# Check if there are any constant variables in the label file; if there are any, please drop them from the label file
output <- check_type(dat = post_matching_data[post_matching_data$treat == 1, ], varList = label.in$Variable_name)
output$constant
if ("pscore" %in% names(post_matching_data) && "pscore" %in% names(pre_matching_data) ){
continuous <- unique(c(sort(continuous), "pscore"))
}
# undebug(gen_bal_config)
# undebug(gen_bal)
# debug(balance_table_plot)
gen_bal_config(conf = conf,
conf_set = conf_set,
pre_matching_data = pre_matching_data,
post_matching_data = post_matching_data,
continuous = continuous,
label.in = label.in)
rm(list=ls())
if (!require("pacman")) install.packages("pacman")
p_load(qdap)  #for column pasting
p_load(DT)    #for attractive tables-+
p_load(tidyverse)
p_load(lattice)
p_load(latticeExtra)
p_load(magrittr)
p_load(openxlsx)
p_load(yaml) # FOR yaml file
p_load(knitr)
p_load(sas7bdat)
p_load(assertthat) # for assert_that
p_load(haven)
conf <- yaml.load_file("config_data.yaml")
source("..\\PSM_FUNCTIONS.R")
input.dir <- conf$dir_file$input_data_dir   #directory for data location
dir <- dir_make_data_process(conf)
output.dir <- dir$dir_data
specs.dir <- conf$dir_file$specs_dir # spec memo dir
label.dir <- conf$dir_file$label_dir # label dir (if needed)
inputFile <- conf$dir_file$inputFile   #data filename
if (conf$dir_file$inputFile_format == "csv"){
data <- read.csv(file.path(input.dir, inputFile), na.strings = c(".", ""), stringsAsFactors = F) %>%
set_colnames(tolower(colnames(.))) %>%
mutate(row_id   = 1:n(),                             # define row index
fakewt = 1)     # define/modify more variables here if needed
} else if (conf$dir_file$inputFile_format == "sas"){
data <- sas7bdat::read.sas7bdat(file.path(input.dir, inputFile)) %>%
set_colnames(tolower(colnames(.))) %>%
mutate(row_id   = 1:n(),                             # define row index
fakewt = 1)
}
num_hosp_categorize <- function(x){
new_x <- case_when(x == 0 ~ '0 hospitalizations',
x == 1 ~ '1 hospitalization',
x == 2 ~ '2 hospitalizations',
x == 3 ~ '3-5 hospitalizations',
x == 4 ~ '6+ hospitalizations')
return(new_x)
}
data <- data %>%
mutate(new_enrl_dt = enrl_dt-min(enrl_dt)+1,
b_sex = ifelse(b_sex==1, 0, 1),  #male is 0, female is 1
b_crgcat = case_when(b_crgcat == 1 ~ 'CRG 5b',
b_crgcat == 2 ~ 'CRG 6',
b_crgcat == 3 ~ 'CRG 7-9'),
b_crg = gsub("  "," ", b_crg),
b_acrg = as.numeric(as.character(b_acrg)),
b_acrg = case_when(b_acrg < 51 ~ "lt51",
b_acrg <= 56 ~ "51-56",
b_acrg <= 66 ~ "61-66",
b_acrg <= 76 ~ "71-76",
b_acrg <= 85 ~ "81-85",
TRUE ~ "91-96")) %>%
mutate_at(c("num_hosp_24_cat","num_hosp_12_cat","num_hosp_3_cat"), num_hosp_categorize)
#convert empty strings from SAS to NAs
charvars <- colnames(data[, sapply(data, class) == "character"])
sapply(data[,charvars ], function(x) sum(is.na(x)))
data[, charvars] <- sapply(data[, charvars], zap_empty)
sapply(data[,charvars ], function(x) sum(is.na(x)))
data$treat = data[[conf$treatment_indicator]]
# Make sure the researcher used the most recent template. If not, rename it in the right order. You may have to drop a few columns that not in the memo such as DefaultLabel
variables <- xlsx::read.xlsx(file.path(specs.dir, conf$dir_file$memo_name), sheetName  =
"Data", rowIndex = c(2,conf$dir_file$memo_start_row:conf$dir_file$memo_end_row))
names(variables) <- substr(names(variables), start=1, stop=3)
variables <- variables %>% select(Var,Lab,Lev,Typ)
colnames(variables) <- c("Variable_name", "Variable_label", "ImportanceLevel", "Type")
variables$Variable_name <- tolower(variables$Variable_name) #make everything lower case
# delete leading empty space
# For NACHRI, may need to change names of hosp days variables
variables$Variable_name <- case_when(grepl("hosp_days", variables$Variable_name) ~ gsub("hosp_days","hospdays", variables$Variable_name),
TRUE ~ variables$Variable_name)
# and remove the default core variables line
variables <- variables[variables$Variable_name != "default core matching variables: drop with caution",]
# Check if there are any variables in the memo that are not in the data file
variables$Variable_name[!(variables$Variable_name %in% names(data))]%>%trimws()
# var_memo is used for check variable type such as binary vs categorical for EDA. It won't be consistent with ps model covariates
var_memo <- variables$Variable_name[variables$ImportanceLevel <= 4]
allMiss <- sapply(data[, var_memo], function(x) tapply(x, data$treat, function(y) sum(is.na(y))))
allMissDf <- as.data.frame(t(allMiss))
colnames(allMissDf) <- c("C", "T")
allMissDf$Total <- rowSums(allMissDf)
allMissDf$TotalPct <- round(100*allMissDf$Total/nrow(data), 2)
kable(allMissDf, caption = 'Missingness by Variable')
# datatable(allMissDf, caption = 'Missingness by Variable',  options = list(pageLength = nrow(allMissDf), dom = 't'))
if (!is.null(conf$dir_file$var_missing_kept) ){
missingvar <- tolower(string_eval(conf$dir_file$var_missing_kept) )
var_memo <- variables$Variable_name[variables$ImportanceLevel <= 4]
var_memo <- var_memo[!(var_memo %in% missingvar)]
variables$ImportanceLevel[variables$Variable_name %in% missingvar] = 5
}else{
var_memo <- variables$Variable_name[variables$ImportanceLevel <= 4]
}
n_treat <- nrow(data[data$treat %in% 1,])
n_ctrl <- nrow(data[data$treat %in% 0,])
#Delete missing rows for key matching variables.
data <- data[complete.cases(data[,c("treat", var_memo)]), ]
n_treat_after <- nrow(data[data$treat %in% 1,])
n_ctrl_after <- nrow(data[data$treat %in% 0,])
message(paste0("There were ", n_treat - n_treat_after, " treatment cases (", round(100*(n_treat - n_treat_after)/n_treat,2) ,"%) and ", n_ctrl - n_ctrl_after ," comparison cases (", round(100*(n_ctrl - n_ctrl_after)/n_ctrl,2) ,"%) dropped due to missing values"))
# Check that hosp_days_3 <= 93, b_age > -1, and b_acrg != lt 51
table(data$hospdays_3 > 93)
table(data$b_age > -1)
table(data$b_acrg)
data <- data %>%
filter(b_age > -1) %>%
filter(b_acrg != "lt51")
n_treat_after2 <- nrow(data[data$treat %in% 1,])
n_ctrl_after2 <- nrow(data[data$treat %in% 0,])
# Notify Anna of any drops
print(paste0("We removed ", n_treat_after - n_treat_after2, " treatment beneficiaries and ",
n_ctrl_after - n_ctrl_after2, " control beneficiaries due to impossible values in b_age and b_acrg"))
top_list <- conf$top_coding$top_coding_varlist
namelist <- names(top_list)
cutoff_list <- NULL
cutoff_name <- conf$top_coding$Top_coding_summary_file_name
if (length(namelist) > 0){
result <- create_top_coding_all(data = data, top_list = top_list, namelist = namelist)
data <- result$data
cutoff_list <- result$cutoff_list
}
cutoff_list
conf1 <- conf$create_var
# Current and newly created variable list (except top coded ones)
if (!is.null(conf1) && length(conf1) > 0){
result <- add_remove_eda_psmodel(conf1, variables = variables)
variables <- result$variables
}
# Top coded variables
conf1 <- conf$top_coding$top_coding_varlist
if (!is.null(conf1) && length(conf1) > 0){
result <- add_remove_eda_psmodel(conf1, variables = variables, topcode = TRUE)
variables <- result$variables
}
var_memo <- variables$Variable_name[variables$ImportanceLevel <= 4]
output <- check_type(dat = data[data$treat == 1, ], varList = var_memo)
#list the categorical and continuous variables for treatment group
binary <- output$bin
categorical <- output$cat
continuous <- output$con
constant <- output$constant
# Research could specify it as categorical but we read them in as continuous. We will set those to be categorical
factor_researcher <- variables$Variable_name[(variables$Type == 2) & !is.na(variables$Type)]
if (!is.null(factor_researcher)){
# dat[,factor.names] <- lapply(dat[,factor.names,drop = F] , as.factor)
data[factor_researcher] <- data.frame(apply(data[factor_researcher], 2, as.factor))
}
#make all categorical variables factors to create dummies
if (!is.null(categorical)){
# dat[,factor.names] <- lapply(dat[,factor.names,drop = F] , as.factor)
data[categorical] <- data.frame(apply(data[categorical], 2, as.factor))
}
if (!is.null(conf$factor_var_list)){
factor.list <- string_eval( conf$factor_var_list)
data[factor.list] <- data.frame(apply(data[factor.list], 2, as.factor))
}
# Run this again to make sure the factor list is correctly incorperated.
output <- check_type(dat = data[data$treat == 1, ], varList = var_memo)
binary <- output$bin
categorical <- output$cat
continuous <- output$con
constant <- output$constant
message("Binary variables:")
binary
message("Categorical variables:")
categorical
message("Continuous variables:")
continuous
message("Constant variables")
constant
variables <- variables %>% mutate(finaltype = ifelse(Variable_name %in% binary, "binary",
ifelse(Variable_name %in% categorical, "categorical",
ifelse(Variable_name %in% continuous, "continuous",
ifelse(Variable_name %in% constant, "constant","other")))))
if (!is.null(categorical)){
# see the PSM_FUNCTIONS.R file for the makeCatDummies() function
catInds <- makeCatDummies(categorical, data) #this function doesn't work unless inputs are factors
colnames(catInds) <- tolower(colnames(catInds))  #keep everything lower case
data <- cbind(data, catInds)
}
level0 <- tolower(variables$Variable_name[variables$ImportanceLevel == 0])
if (!is.null(level0) & length(level0) > 0){
data[level0] <- data.frame(apply(data[level0], 2, as.factor))
levels0 <- paste0("[",paste(level0, collapse = "-"),"]")
data$stratum <- as.factor(paste(levels0, paste0("[", paste2(data[, level0, drop = F], sep = "-"),"]"), sep = "--"))
strata <- levels(data$stratum)
}else{
data$stratum <- "All"
strata <- "All"
}
data$stratum
table(data$stratum)
table(data$treat, data$stratum)
rm(list = ls())
# Load packages
if (!require("pacman")) install.packages("pacman")
p_load(RItools)
p_load(optmatch)
p_load(gplots)
p_load(officer)   ## make sure to install from CRAN for up to date version
p_load(flextable) ## make sure to install from CRAN for up to date version
p_load(qdap)
p_load(tidyverse) ## make sure to install from CRAN for up to date version
p_load(spatstat)
p_load(quantreg)  # I don't think you need to have this loaded, just installed
p_load(weights)
p_load(openxlsx)
p_load(lattice)
p_load(latticeExtra)
p_load(magrittr)
p_load(rlang)  ## make sure to install from CRAN for up to date version
p_load(yaml)
p_load(gridGraphics)#for ggpubr
p_load(ggpubr)# for ggarrange
# p_load(ReporteRs)
# Load files
conf <- yaml.load_file("config_matching.yaml")
source("..\\PSM_FUNCTIONS.R")
conf_set <- conf$Balance_post
dir <- dir_make(conf, conf_set)
input.dir <- conf$dir_file$input_dir
load(file.path(input.dir, branch_name, conf$dir_file$input_data_folder, conf$dir_file$input_data_name))
rm(list = ls())
# Load packages
if (!require("pacman")) install.packages("pacman")
p_load(RItools)
p_load(optmatch)
p_load(gplots)
p_load(officer)   ## make sure to install from CRAN for up to date version
p_load(flextable) ## make sure to install from CRAN for up to date version
p_load(qdap)
p_load(tidyverse) ## make sure to install from CRAN for up to date version
p_load(spatstat)
p_load(quantreg)  # I don't think you need to have this loaded, just installed
p_load(weights)
p_load(openxlsx)
p_load(lattice)
p_load(latticeExtra)
p_load(magrittr)
p_load(rlang)  ## make sure to install from CRAN for up to date version
p_load(yaml)
p_load(gridGraphics)#for ggpubr
p_load(ggpubr)# for ggarrange
# p_load(ReporteRs)
# Load files
conf <- yaml.load_file("config_matching.yaml")
source("..\\PSM_FUNCTIONS.R")
conf_set <- conf$Balance_post
dir <- dir_make(conf, conf_set)
input.dir <- conf$dir_file$input_dir
load(file.path(input.dir, branch_name, conf$dir_file$input_data_folder, conf$dir_file$input_data_name))
output.dir <- dir$dir_data
load(file.path(output.dir, conf_set$post_matching_data_name))
pre_matching_data = dat
post_matching_data =  full_final_id
custom_replace <- function(mylist){
return(gsub("[/]","_",gsub("[-]","_", gsub(" ", "_", gsub("[+]","_",mylist)))))
}
# replace column names and variable names: spaces, plus signs
colnames(pre_matching_data) <- custom_replace(colnames(pre_matching_data))
colnames(post_matching_data) <- custom_replace(colnames(post_matching_data))
# There should be no NAs in your data for the balance checking variables to run balance checks. Below, we remove observations with NAs.
label.in <- read.csv(file.path(conf_set$label$dir, branch_name,conf_set$label$folder,
conf_set$label$file), stringsAsFactors = F) %>%
mutate(Variable_name = tolower(Variable_name)) %>% filter(ImportanceLevel <= 4)
label.in$Variable_name <- custom_replace(label.in$Variable_name)
label.in$Variable_name[!(label.in$Variable_name %in% names(post_matching_data))]
label.in$Variable_name[!(label.in$Variable_name %in% names(pre_matching_data))]
# number of cases before dropping missing
nrow(pre_matching_data)
nrow(post_matching_data)
pre_matching_data <- pre_matching_data[complete.cases(pre_matching_data[, label.in$Variable_name]),]
post_matching_data <- post_matching_data[complete.cases(post_matching_data[, label.in$Variable_name]),]
# number of cases after dropping missing
nrow(pre_matching_data)
nrow(post_matching_data)
# Check if there are any constant variables in the label file; if there are any, please drop them from the label file
output <- check_type(dat = post_matching_data[post_matching_data$treat == 1, ], varList = label.in$Variable_name)
output$constant
if ("pscore" %in% names(post_matching_data) && "pscore" %in% names(pre_matching_data) ){
continuous <- unique(c(sort(continuous), "pscore"))
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(ggplot2)
library(dplyr)
library(tidyverse)
library("installMPR")
install_mpr("plotMPR")
rm(list=ls())
list.files('../DockerShinyApp/app/data/')
data <- read.csv('../DockerShinyApp/app/data/final_data.csv')
dict <- read.csv('../DockerShinyApp/app/data/final_data_dictionary.csv')
sdoh_scores <- paste0("sdoh_score_",c(1:6))
summary(data[,sdoh_scores])
# pivot data
long <- data %>%
select_at(sdoh_scores) %>%
gather(sdoh_group, sdoh_score)
# histograms of all scores
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot()
head(long)
data %>%
select_at(sdoh_scores)
sdoh_names <- dict %>%
filter(column_name %in% sdoh_scores)
sdoh_names
sdoh_names <- dict %>%
filter(column_name %in% sdoh_scores) %>%
select(description)
sdoh_names
sdoh_names <- dict %>%
filter(column_name %in% sdoh_scores) %>%
select(description) %>%
pull()
sdoh_names
sdoh_names <- dict %>%
filter(column_name %in% sdoh_scores) %>%
select(description) %>%
pull() %>%
as.character()
sdoh_names
# pivot data
long <- data %>%
select_at(sdoh_scores) %>%
rename_at(sdoh_scores, sdoh_names)
?rename
# pivot data
long <- data %>%
select_at(sdoh_scores) %>%
gather(sdoh_group, sdoh_score)
head(long)
# pivot data
long <- data %>%
select_at(sdoh_scores) %>%
gather(sdoh_group, sdoh_score)
head(long)
data %>%
select_at(sdoh_scores)
# pivot data
long <- data %>%
select_at(sdoh_scores) %>%
gather(sdoh_group, sdoh_score)
head(long)
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long) <- sdoh_names
long <- long %>%
gather(sdoh_group, sdoh_score)
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot()
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long)
sdoh_names
names(long) <- sdoh_names
long
long <- long %>%
gather(sdoh_group, sdoh_score)
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot()
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot() +
label(y = "SDoH Score")
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot() +
ylab(y = "SDoH Score")
ggplot(data = long,
aes(y = sdoh_score,
group = sdoh_group,
fill = sdoh_group)) +
geom_boxplot() +
ylab("SDoH Score")
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long)
sdoh_names
names(long) <- sdoh_names
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group)
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = `SDoH Pillar`,
fill = `SDoH Pillar`)) +
geom_boxplot() +
ylab("SDoH Score")
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
arange(sdoh_group)
head(long)
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
arrange(sdoh_group)
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = `SDoH Pillar`,
fill = `SDoH Pillar`)) +
geom_boxplot() +
ylab("SDoH Score")
summary(long)
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long) <- sdoh_names
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
arrange(sdoh_group) %>%
mutate(sdoh_group = as.factor(sdoh_group))
head(long)
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
arrange(`SDoH Pillar`) %>%
mutate(`SDoH Pillar` = as.factor(`SDoH Pillar`))
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long) <- sdoh_names
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
arrange(`SDoH Pillar`) %>%
mutate(`SDoH Pillar` = as.factor(`SDoH Pillar`))
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = `SDoH Pillar`,
fill = `SDoH Pillar`)) +
geom_boxplot() +
ylab("SDoH Score")
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
mutate(`SDoH Pillar` = as.factor(`SDoH Pillar`, levels = c("Economic Stability","Neighborhood & Physical Environment",
"Education","Food","Community","Health Care System"))) %>%
arrange(`SDoH Pillar`)
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
mutate(`SDoH Pillar` = factor(`SDoH Pillar`, levels = c("Economic Stability","Neighborhood & Physical Environment",
"Education","Food","Community","Health Care System"))) %>%
arrange(`SDoH Pillar`)
head(long)
# pivot data
long <- data %>%
select_at(sdoh_scores)
names(long) <- sdoh_names
long <- long %>%
gather(sdoh_group, sdoh_score) %>%
rename(`SDoH Pillar` = sdoh_group) %>%
mutate(`SDoH Pillar` = factor(`SDoH Pillar`, levels = c("Economic Stability","Neighborhood & Physical Environment",
"Education","Food","Community","Health Care System"))) %>%
arrange(`SDoH Pillar`)
head(long)
ggplot(data = long,
aes(y = sdoh_score,
group = `SDoH Pillar`,
fill = `SDoH Pillar`)) +
geom_boxplot() +
ylab("SDoH Score")
